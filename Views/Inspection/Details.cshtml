@model PartsIq.Models.InspectionViewModel

@section styles{
    <style>
        .divider {
            background-color: #EEEEEE;
            width: 100%;
            height: 2px;
            margin: 0.5rem 0;
        }
    </style>
}
<div class="page-content">
    <div class="row" id="mainContent">
        <div class="page-content">
            <!-- Title -->
            <div class="page-title-box">
                <div class="container-fluid">
                    <div class="page-title dflex-between-center">
                        <h3 class="mb-1 fw-bold">@Model.DeliveryDetail.LotNumber</h3>
                        <ol class="breadcrumb mb-0 mt-1">
                            <li class="breadcrumb-item">
                                <a href="~/">
                                    <i class="bx bx-home fs-xs"></i>
                                </a>
                            </li>
                            <li class="breadcrumb-item">
                                <a href="~/Inspection">
                                    Inspection
                                </a>
                            </li>
                            <li class="breadcrumb-item active">@Model.DeliveryDetail.LotNumber</li>
                        </ol>
                    </div>
                </div>
            </div>
            <div class="page-content-wrapper mt--45">
                <div class="container-fluid">
                    <div class="row">
                        <div class="card">
                            <div class="card-header">
                                <h4>General Information</h4>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-lg-6 col-md-12">
                                        <div class="d-flex gap-3">
                                            <p><b>Lot Number</b>:</p>
                                            <p>@Model.DeliveryDetail.LotNumber</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Date Delivered</b>:</p>
                                            <p>@Model.DeliveryDetail.Delivery.DateDelivered.ToString("MMM dd, yyyy")</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Part Code</b>:</p>
                                            <p>@Model.Part.Code</p>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-12">
                                        <div class="d-flex gap-3">
                                            <p><b>Lot Quantity</b>:</p>
                                            <p>@Model.DeliveryDetail.LotQuantity</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Supplier</b>:</p>
                                            <p>@Model.DeliveryDetail.Delivery.Supplier.Name</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Part Name</b>:</p>
                                            <p>@Model.Part.Name</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Inspection Item -->
            <div class="page-content-wrapper">
                <div class="container-fluid">
                    <div class="row">
                        <div class="card">
                            <div class="card-header">
                                <h4>Checkpoint Information</h4>
                            </div>
                            <div class="card-body">
                                @Html.Partial("_CheckpointInfo")

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        $(document).ready(function () {

            let cavities = @Html.Raw(Json.Encode(ViewBag.JsonCavities));
            console.log(cavities);

            $(document).on('change', '#CheckpointInfo', function () {
                let checkpointID = $(this).val();
                let inspectionID = $('#submitInspectionItem').attr('data-inspectionid');

                // Update the data and reload the table
                inspectionTable.ajax.reload();
                $('#submitInspectionItem').attr('data-checkpointid', checkpointID);
                $('#SampleNumber').val(1);
            });


            function checkSampleNumber(sampleNumber, cavityID) {
                // Parse the sampleNumber to ensure it's treated as a number
                let parsedSampleNumber = parseInt(sampleNumber, 10);

                // Find the cavity with the given cavityID
                let cavity = cavities.find(el => el.CavityID == cavityID);

                // Check if the cavity exists
                if (!cavity) {
                    console.error('Cavity not found.');
                    return false;
                }

                // Log for debugging
                console.log('Cavity MaxSampleNumber:', cavity.MaxSampleNumber);
                console.log('Parsed Sample Number:', parsedSampleNumber);
                console.log('Original Sample Number:', sampleNumber);
                console.log('Cavity Info:', cavity);

                // Check if the current cavity can handle this sample number
                if (cavity.MaxSampleNumber >= parsedSampleNumber) {
                    // Set the CavityName in the input field
                    $('#CavityNumber').val(cavity.Name);
                    $('#submitInspectionItem').attr('data-cavityid', cavity.CavityID);

                    console.log(`Cavity assigned: ${cavity.Name} with MaxSampleNumber: ${cavity.MaxSampleNumber}`);
                    return true;
                } else {
                    console.warn('Sample number exceeds the max for this cavity. Looking for another cavity.');

                    // Find the next cavity where the sampleNumber falls in the correct range
                    let nextCavity = cavities.find(el => el.MaxSampleNumber >= parsedSampleNumber);

                    if (nextCavity) {
                        // Set the CavityName and update the submit button
                        $('#CavityNumber').val(nextCavity.Name);
                        $('#submitInspectionItem').attr('data-cavityid', nextCavity.CavityID);

                        console.log(`New cavity assigned: ${nextCavity.Name} with MaxSampleNumber: ${nextCavity.MaxSampleNumber}`);
                        return true;
                    } else {
                        console.error('No suitable cavity found for the given sample number.');
                        return false;
                    }
                }
            }


            $(document).on('click', '#submitInspectionItem', function () {

                let token = $('input[name="__RequestVerificationToken"]').val();
                let checkpointID = $(this).data('checkpointid');
                let inspectionID = $(this).data('inspectionid');

                let Judgement = 0;

                // Explicitly fetch the updated data-cavityid directly from the DOM
                let cavityID = $('#submitInspectionItem').attr('data-cavityid'); // This ensures you're getting the most recent value

                let measurement = $(document).find('#Measurement').val();
                let cavityNumber = $(document).find('#CavityNumber').val();
                let sampleNumber = $(document).find('#SampleNumber').val();

                // Check if this logs the correct cavityID
                let upperLimit = $('#UpperLimit').val();
                let lowerLimit = $('#LowerLimit').val();

                if (measurement <= upperLimit && measurement >= lowerLimit) {
                    Judgement = 1;
                }

                //If IsMeasurement, validate to Lower and Upperlimit if it is GOOD or NOT GOOD



                let data = {
                    SampleNumber: sampleNumber,
                    CavityName: cavityNumber,
                    Measurement: measurement,
                    OrigMeasurement: measurement,
                    Judgement: Judgement
                };

                var formData = new FormData();
                formData.append("CheckpointID", checkpointID);
                formData.append("InspectionID", inspectionID);
                formData.append("CavityID", cavityID);  // Append the most recent cavityID
                formData.append("Measurement", measurement);
                formData.append("OrigMeasurement", measurement);
                formData.append("CavityNumber", cavityNumber);
                formData.append("SampleNumber", sampleNumber);
                formData.append("__RequestVerificationToken", token);

                $.ajax({
                    url: '@Url.Action("CreateInspectionItem", "InspectionItems")',
                    method: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            inspectionTable.row.add(data).draw();
                            if (response.SampleNumber == "0") {
                                alertify.success("End inspection");
                                $('#Measurement').attr("readonly", true);
                            } else {
                                $('#SampleNumber').val(response.SampleNumber);
                                checkSampleNumber(response.SampleNumber, cavityID);  // Pass the updated cavityID
                            }
                        }
                    }
                });
            });


        var inspectionTable = $('#inspection-item-table').DataTable({
            ajax: {
                url: '@Url.Action("GetInspectionItems", "InspectionItems")',
                data: function (d) {
                    let button = $('#submitInspectionItem');
                    d.CheckpointID = $('#CheckpointInfo').val();
                    d.InspectionID = $(button).data('inspectionid');
                    d.CavityID = $(button).data('cavityid');
                },
                dataSrc: 'data'
            },
            responsive: false,
            searching: false,
            scrollX: true,
            columns: [
                { data: "SampleNumber" },
                { data: "CavityName" },
                { data: "Measurement" },
                { data: "OrigMeasurement" },
                {
                    data: "Judgement",
                    render: function (data, type, row) {
                        let decision = data == "1" ? "GOOD" : "NOT GOOD";
                        return `<span> ${decision} </span> `;
                    }
                },
            ],
            order: [[0, 'asc']]
        });



        });
    </script>
}