@model PartsIq.Models.Checkpoint
@{
    ViewBag.Title = "CreatePartCheckpoint";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-content">
    <!-- page header -->
    <div class="page-title-box">
        <div class="container-fluid">
            <div class="page-title dflex-between-center">
                <h3 class="mb-1 fw-bold">Users</h3>
                <ol class="breadcrumb mb-0 mt-1">
                    <li class="breadcrumb-item">
                        <a href="../index.html">
                            <i class="bx bx-home fs-xs"></i>
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="ui-buttons.html">
                            Components
                        </a>
                    </li>
                    <li class="breadcrumb-item active">Accordian</li>
                </ol>
            </div>
        </div>
    </div>

    <div class="page-content-wrapper mt--45">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">New Checkpoint</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <form id="upload-form" enctype="multipart/form-data">
                                        <div class="form-group">
                                            <label for="example-fileinput">Default file input</label>
                                            <input name="excelFile" type="file" id="excelFile" class="form-control">
                                        </div>
                                        <button type="submit" value="Upload" class="btn btn-info waves-effect waves-light " data-effect="wave">Sign in</button>

                                    </form>

                                </div>
                            </div>
                        </div>
                    </div> <!-- end card-box-->
                </div> <!-- end col -->
            </div> <!-- end row -->

            <div class="row mt-2">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">Create Checkpoint</h5>
                        </div>
                        <div class="card-body text-primary">
                            <div id="form-container"></div>
                            <button id="submit-button" class="btn btn-primary">Submit</button>

                        </div>
                    </div> <!-- end card-box-->
                </div>

            </div>


        </div>
    </div>
</div>
<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Checkpoint</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Part_ID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Part_ID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Part_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InspectionPart, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InspectionPart, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InspectionPart, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsMeasurement, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsMeasurement, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsMeasurement, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Specification, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="col-md-10">
                    @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="input-group">
                        <div class="input-group-text">+</div>
                        <input type="text" class="form-control spec-input" id="upper-spec">
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="form-group">

                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })

                        <div class="input-group">
                            <div class="input-group-text">-</div>
                            <input type="text" class="form-control spec-input" id="lower-spec">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LimitLower, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LimitLower, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LimitLower, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LimitUpper, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LimitUpper, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LimitUpper, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SamplingMethod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SamplingMethod, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SamplingMethod, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Tools, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tools, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tools, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



@section scripts {
    <script>
        $(document).ready(function () {


            function renderHtml(data) {
                let html = '';

                data.forEach((el, index) => {
                    html += `
                            <form class="object-form" id="form-${index}">
                                <div class="form-group">
                                    <label for="code-${index}">Code</label>
                                    <input type="text" class="form-control" id="code-${index}" name="Code" value="${el.Code}">
                                </div>
                                <div class="form-group">
                                    <label for="inspectionPart-${index}">Inspection Part</label>
                                    <input type="text" class="form-control" id="inspectionPart-${index}" name="InspectionPart" value="${el.InspectionPart}">
                                </div>
                                <div class="form-group">
                                    <label for="specification-${index}">Specification</label>
                                    <input type="text" class="form-control" id="specification-${index}" name="Specification" value="${el.Specification}">
                                </div>
                                <div class="form-group">
                                    <label for="currentTolerance-${index}">Current Tolerance</label>
                                    <input type="text" class="form-control" id="currentTolerance-${index}" name="CurrentTolerance" value="${el.CurrentTolerance}">
                                </div>
                                <div class="form-group">
                                    <label for="tool-${index}">Tool</label>
                                    <input type="text" class="form-control" id="tool-${index}" name="Tool" value="${el.Tool}">
                                </div>
                                <div class="form-group">
                                    <label for="methodSampling-${index}">Method Sampling</label>
                                    <input type="text" class="form-control" id="methodSampling-${index}" name="MethodSampling" value="${el.MethodSampling}">
                                </div>
                                <div class="form-group">
                                    <label for="level-${index}">Level</label>
                                    <input type="text" class="form-control" id="level-${index}" name="Level" value="${el.Level}">
                                </div>
                                <div class="form-group">
                                    <label for="level1-${index}">Level 1</label>
                                    <input type="text" class="form-control" id="level1-${index}" name="Level_1" value="${el.Level_1}">
                                </div>
                                <div class="form-group">
                                    <label for="upperLimit-${index}">Upper Limit</label>
                                    <input type="text" class="form-control" id="upperLimit-${index}" name="UpperLimit" value="${el.UpperLimit}">
                                </div>
                                <div class="form-group">
                                    <label for="lowerLimit-${index}">Lower Limit</label>
                                    <input type="text" class="form-control" id="lowerLimit-${index}" name="LowerLimit" value="${el.LowerLimit}">
                                </div>
                            </form>
                            <hr>
                        `;
                });

                document.getElementById('form-container').innerHTML = html;
            }

            function collectFormData() {
                const forms = document.querySelectorAll('.object-form');
                const data = [];

                forms.forEach(form => {
                    const formData = new FormData(form);
                    const formObject = {};

                    formData.forEach((value, key) => {
                        formObject[key] = value;
                    });

                    data.push(formObject);
                });

                return data;
            }
            function submitForms() {
                const formData = collectFormData();
                
                $.ajax({
                    url: '@Url.Action("UploadList", "Checkpoints")',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        console.log('Data submitted successfully', response);
                    },
                    error: function (error) {
                        console.error('Error submitting data', error);
                    }
                });
            }
            document.getElementById('submit-button').addEventListener('click', submitForms);



                function processSpecifications(data) {
                    return data.map(item => {
                        const { Specification, CurrentTolerance } = item;
                        let leftTolerance, rightTolerance;

                        if (CurrentTolerance.includes('±')) {
                            let toleranceValue = parseFloat(CurrentTolerance.replace(/[()± ]/g, ''));
                            leftTolerance = +toleranceValue;
                            rightTolerance = -toleranceValue;
                        } else if (CurrentTolerance.includes('/')) {
                            let parts = CurrentTolerance.replace(/[() ]/g, '').split('/');
                            leftTolerance = parseFloat(parts[0]);
                            rightTolerance = parseFloat(parts[1]);
                        }
                        var Specs = Specification.replace(/Ø/g, '')
                        var floatSpecification = parseFloat(Specs);
                        
                        const upperLimit = floatSpecification > 0 ?  (floatSpecification + leftTolerance).toFixed(2) : 0;
                        const lowerLimit = floatSpecification > 0 ? (floatSpecification + rightTolerance).toFixed(2) : 0;

                        return {
                            ...item,
                            UpperLimit: upperLimit,
                            LowerLimit: lowerLimit
                        };
                    });
                }

                $('#upload-form').submit(function (event) {
                    event.preventDefault();
                    var formData = new FormData();
                    var fileInput = $('#excelFile')[0].files[0];
                    formData.append('excelFile', fileInput);


                    $.ajax({
                        url: '@Url.Action("Upload", "Checkpoints")',
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (success) {
                            var data = processSpecifications(success);
                            console.log(data);
                            renderHtml(data);

                        },
                        else: function (err) {
                            console.log(err);
                        }
                    });
                });

                $(document).on('blur', '#lower-spec', function () {
                    var specs = $('#Specification');
                    var val = $(this).val();
                    specs = specs.val().match(/\d+/)[0];
                    var lowerLimit = specs - val;
                    $('#LimitLower').val(lowerLimit);

                });

                $(document).on('blur', '#upper-spec', function () {
                    var specs = $('#Specification').val();
                    var val = $(this).val();

                    // Extract the numeric part from specs and convert to a number
                    var numericSpecs = parseFloat(specs.match(/\d+(\.\d+)?/)[0]);

                    // Convert val to a number
                    var numericVal = parseFloat(val);

                    // Add the numeric values
                    var upperLimit = numericSpecs + numericVal;

                    console.log(`${numericSpecs}, ${numericVal} ${upperLimit}`);
                    $('#LimitUpper').val(upperLimit);
                });

            });
    </script>

}


