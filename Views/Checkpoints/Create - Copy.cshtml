@model PartsIq.Models.Checkpoint

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Checkpoint</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Part_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Part_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Part_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.InspectionPart, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.InspectionPart, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.InspectionPart, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsMeasurement, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.IsMeasurement, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IsMeasurement, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="form-group">
                @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Specification, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col">
            <div class="col-md-10">
                @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="input-group">
                    <div class="input-group-text">+</div>
                    <input type="text" class="form-control spec-input" id="upper-spec">
                </div>
            </div>
        </div>
        <div class="col">
            <div class="form-group">

                <div class="col-md-10">
                    @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="input-group">
                        <div class="input-group-text">-</div>
                        <input type="text" class="form-control spec-input" id="lower-spec">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LimitLower, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LimitLower, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LimitLower, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LimitUpper, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LimitUpper, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LimitUpper, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SamplingMethod, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SamplingMethod, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SamplingMethod, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.Tools, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tools, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tools, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("Upload", "Checkpoints", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="form-group">
                <label for="example-fileinput">Default file input</label>
                <input name="excelFile" type="file" id="example-fileinput" class="form-control">

                <input type="submit" value="Upload" />
            </div>


        }



    </div>
</div>
@section scripts {
    <script>
        $(document).ready(function () {
            $(document).on('blur', '#lower-spec', function () {
                var specs = $('#Specification');
                var val = $(this).val();
                specs = specs.val().match(/\d+/)[0];
                var lowerLimit = specs - val;
                $('#LimitLower').val(lowerLimit);

            });

            $(document).on('blur', '#upper-spec', function () {
                var specs = $('#Specification').val();
                var val = $(this).val();

                // Extract the numeric part from specs and convert to a number
                var numericSpecs = parseFloat(specs.match(/\d+(\.\d+)?/)[0]);

                // Convert val to a number
                var numericVal = parseFloat(val);

                // Add the numeric values
                var upperLimit = numericSpecs + numericVal;

                console.log(`${numericSpecs}, ${numericVal} ${upperLimit}`);
                $('#LimitUpper').val(upperLimit);
            });

        });
    </script>

    }