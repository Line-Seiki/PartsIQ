@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<div class="page-content">
    <!-- page header -->
    <div class="page-title-box">
        <div class="container-fluid">
            <div class="page-title dflex-between-center">
                <a href="~/Parts/Details/@ViewBag.PartId" class="mb-1 fw-bold card-title text-white text-underline"><i class="mdi mdi-arrow-left-bold"></i> Go back</a>
                <ol class="breadcrumb mb-0 mt-1">
                    <li class="breadcrumb-item">
                        <a href="../index.html">
                            <i class="bx bx-home fs-xs"></i>
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="~/Parts/Details/@ViewBag.PartId">
                            @ViewBag.PartName
                        </a>
                    </li>
                    <li class="breadcrumb-item active">Create</li>
                </ol>
            </div>
        </div>
    </div>

    <div class="page-content-wrapper mt--45">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="d-flex justify-content-between card-header">
                            <h5 class="card-title">Create Checkpoint</h5>
                            <button id="add-checkpoint" class="btn btn-secondary"><i class="mdi mdi-plus"></i> Add Checkpoint</button>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <form id="upload-form" enctype="multipart/form-data">
                                        <div class="form-group">
                                            <label for="example-fileinput">Upload Checkpoints (.xlsx)</label>
                                            <input name="excelFile" type="file" id="excelFile" class="form-control">
                                        </div>
                                        <div id="checkpoint-btns" class="d-flex justify-content-start gap-2">
                                            <button id="upload-form-btn" type="submit" value="Upload" class="btn btn-primary waves-effect waves-light " data-effect="wave">Generate</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div> <!-- end card-box-->
                </div> <!-- end col -->
            </div> <!-- end row -->
            <!-- Checkpoints Tab Container-->
            <div class="row mt-2">
                <div class="card">
                    <div id="checkpoint-container" class="card-body d-none">
                        <ul id="checkpoint-tab" class="nav nav-tabs"></ul>
                        <div class="tab-content" id="checkpoint-content"></div>
                    </div>
                </div>
            </div>

        


        </div>
    </div>
</div>

@section scripts {
    <script src="~/Utility/JS/tabs.js"></script>
    <script>
        const partID = @ViewBag.PartId;
        const addCheckpoint = document.getElementById('add-checkpoint');
        console.log('partId', partID);

            $(document).ready(function () {

                function processSpecifications(data) {
                    console.log(data);
                    return data.map(item => {
                        let { Specification, SpecificationRange } = item;
                        let leftTolerance, rightTolerance;
                        if (Specification.includes('Ø') || Specification.includes('ø')) Specification = Specification.replace(/[Øø]/g, '');

                        if (!SpecificationRange) {
                            return item;
                        } else if (SpecificationRange.includes('±')) {
                            let toleranceValue = parseFloat(SpecificationRange.replace(/[()± ]/g, ''));
                            leftTolerance = +toleranceValue;
                            rightTolerance = -toleranceValue;
                        } else if (SpecificationRange.includes('/')) {
                            let parts = SpecificationRange.replace(/[() ]/g, '').split('/');
                            leftTolerance = parseFloat(parts[0]);
                            rightTolerance = parseFloat(parts[1]);
                        }

                        if (SpecificationRange) {
                            const upperLimit = (parseFloat(Specification.replace(/[Øø]/g,'')) + leftTolerance).toFixed(2);
                            const lowerLimit = (parseFloat(Specification.replace(/[Øø]/g, '')) + rightTolerance).toFixed(2);

                            return {
                                ...item,
                                Specification,
                                UpperLimit: upperLimit,
                                LowerLimit: lowerLimit
                            };
                        }
                    });
                }

                $('#upload-form').submit(function (event) {
                    event.preventDefault();                  
                    const checkpointContainer = document.getElementById('checkpoint-container');
                    checkpointContainer.classList.remove('d-none');
                    var formData = new FormData();
                    var fileInput = $('#excelFile')[0].files[0];
                    formData.append('excelFile', fileInput);
                    formData.append('PartID', partID);
                    if (document.getElementById('clear-all')) {
                        document.getElementById('clear-all').remove();
                    }
                    clearCheckpoints();
              
                    $.ajax({
                        url: '@Url.Action("UploadPartCheckpoints", "Checkpoints")',
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (success) {
                            console.log(processSpecifications(success.data));
                            const res = processSpecifications(success.data);
                            const addRows = res.map(data => new DynamicTabs('checkpoint-tab', 'checkpoint-content', 'checkpoint', data));
                            if (document.getElementById('clear-all')) {
                                document.getElementById('clear-all').remove();
                                checkpointContainer.classList.add('d-none');
                            }
                            clearCheckpointsContainer();

                        },
                        else: function (err) {
                            console.log(err);
                        }
                    });
                });

                $(document).on('blur', '#lower-spec', function () {
                    var specs = $('#Specification');
                    var val = $(this).val();
                    specs = specs.val().match(/\d+/)[0];
                    var lowerLimit = specs - val;
                    $('#LimitLower').val(lowerLimit);

                });

                $(document).on('blur', '#upper-spec', function () {
                    var specs = $('#Specification').val();
                    var val = $(this).val();

                    // Extract the numeric part from specs and convert to a number
                    var numericSpecs = parseFloat(specs.match(/\d+(\.\d+)?/)[0]);

                    // Convert val to a number
                    var numericVal = parseFloat(val);


                    // Add the numeric values
                    var upperLimit = numericSpecs + numericVal;

                    console.log(`${numericSpecs}, ${numericVal} ${upperLimit}`);
                    $('#LimitUpper').val(upperLimit);
                });

                // For Adding Checkpoint
                if (addCheckpoint) {
                    addCheckpoint.addEventListener('click', function () {
                        console.log('click');
                        createCheckpointForm();
                    });
                }
                

            });

        function createCheckpointForm() {
            const data = {
                PartID: partID,
                Manual: true,
            }
            const checkpointContainer = document.getElementById('checkpoint-container');
            if (checkpointContainer) {
                checkpointContainer.classList.remove('d-none');
                const item = new DynamicTabs('checkpoint-tab', 'checkpoint-content', 'checkpoint', data);
            }
        }

        function clearCheckpoints() {
            DynamicTabs.tabCounter = 0;
            const checkpointList = document.getElementById('checkpoint-tab');
            const checkpointContent = document.getElementById('checkpoint-content');
            const checkpointContainer = document.getElementById('checkpoint-container');
            checkpointList.innerHTML = '';
            checkpointContent.innerHTML = '';
            if (document.getElementById('clear-all')) {
                document.getElementById('clear-all').remove();
                checkpointContainer.classList.add('d-none');
            }
        }

        function clearCheckpointsContainer() {
            const checkpointBtns = document.getElementById('checkpoint-btns');
            if (!document.getElementById('clear-all')) {
                const clearAllCheckpointsBtn = `<button id="clear-all" class="btn btn-secondary" onclick="clearCheckpoints()">Clear Checkpoints</button>`
                checkpointBtns.insertAdjacentHTML('beforeend', clearAllCheckpointsBtn)
            }
        }

        
    </script>

}
