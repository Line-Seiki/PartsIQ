@model PartsIq.Models.Checkpoint

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="page-content">
    <!-- page header -->
    <div class="page-title-box">
        <div class="container-fluid">
            <div class="page-title dflex-between-center">
                <h3 class="mb-1 fw-bold">PIS Checkpoint</h3>
                <ol class="breadcrumb mb-0 mt-1">
                    <li class="breadcrumb-item">
                        <a href="../index.html">
                            <i class="bx bx-home fs-xs"></i>
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="ui-buttons.html">
                            Components
                        </a>
                    </li>
                    <li class="breadcrumb-item active">Accordian</li>
                </ol>
            </div>
        </div>
    </div>

    <div class="page-content-wrapper mt--45">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">New Checkpoint</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <form id="upload-form" enctype="multipart/form-data">
                                        <div class="form-group">
                                            <label for="example-fileinput">Default file input</label>
                                            <input name="excelFile" type="file" id="excelFile" class="form-control">
                                        </div>
                                        <button type="submit" value="Upload" class="btn btn-info waves-effect waves-light " data-effect="wave">Sign in</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div> <!-- end card-box-->
                </div> <!-- end col -->
            </div> <!-- end row -->
            <!-- Checkpoints Tab Container-->
            <div class="row mt-2">
                <div class="card">
                    <div id="checkpoint-container" class="card-body d-none">
                        <ul id="checkpoint-tab" class="nav nav-tabs"></ul>
                        <div class="tab-content" id="checkpoint-content"></div>
                    </div>
                </div>
            </div>

            <div class="row mt-2">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">Create Checkpoint</h5>
                        </div>
                        <div class="card-body text-primary">
                            @using (Html.BeginForm())
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    @Html.HiddenFor(model => model.Part_ID, new { Value = ViewBag.PartId })

                                    <h4>Checkpoint</h4>
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Part_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Part_ID, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Part_ID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.InspectionPart, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.InspectionPart, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.InspectionPart, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IsMeasurement, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.IsMeasurement, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.IsMeasurement, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    @Html.EditorFor(model => model.Specification, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="col-md-10">
                                                @Html.Label("Upper Limit", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="input-group">
                                                    <div class="input-group-text">+</div>
                                                    <input type="text" class="form-control spec-input" id="upper-spec">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="form-group">
                                                <div class="col-md-10">
                                                    @Html.Label("Lower Limit", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="input-group">
                                                        <div class="input-group-text">-</div>
                                                        <input type="text" class="form-control spec-input" id="lower-spec">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LimitLower, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.LimitLower, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.LimitLower, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LimitUpper, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.LimitUpper, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.LimitUpper, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SamplingMethod, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.SamplingMethod, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.SamplingMethod, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Tools, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Tools, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Tools, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Create" class="btn btn-default" />
                                        </div>
                                    </div>
                                </div>
                            }

                            <div>
                                @Html.ActionLink("Back to List", "Index")
                            </div>
                        </div>

                    </div> <!-- end card-box-->
                </div>

            </div>


        </div>
    </div>
</div>

@section scripts {
    <script src="~/Utility/JS/tabs.js"></script>
    <script>
            $(document).ready(function () {

                function processSpecifications(data) {
                    return data.map(item => {
                        let { Specification, SpecificationRange } = item;
                        let leftTolerance, rightTolerance;
                        if (Specification.includes('Ø')) Specification = Specification.replace(/[Ø]/g, '');

                        if (!SpecificationRange) {
                            return item;
                        } else if (SpecificationRange.includes('±')) {
                            let toleranceValue = parseFloat(SpecificationRange.replace(/[()± ]/g, ''));
                            leftTolerance = +toleranceValue;
                            rightTolerance = -toleranceValue;
                        } else if (SpecificationRange.includes('/')) {
                            let parts = SpecificationRange.replace(/[() ]/g, '').split('/');
                            leftTolerance = parseFloat(parts[0]);
                            rightTolerance = parseFloat(parts[1]);
                        }

                        if (SpecificationRange) {
                            const upperLimit = (parseFloat(Specification.replace(/[Ø]/g,'')) + leftTolerance).toFixed(2);
                            const lowerLimit = (parseFloat(Specification.replace(/[Ø]/g, '')) + rightTolerance).toFixed(2);

                            return {
                                ...item,
                                Specification,
                                UpperLimit: upperLimit,
                                LowerLimit: lowerLimit
                            };
                        }
                    });
                }

                $('#upload-form').submit(function (event) {
                    event.preventDefault();
                    const checkpointContainer = document.getElementById('checkpoint-container');
                    checkpointContainer.classList.remove('d-none');
                    var formData = new FormData();
                    var fileInput = $('#excelFile')[0].files[0];
                    formData.append('excelFile', fileInput);

                    $.ajax({
                        url: '@Url.Action("UploadPartCheckpoints", "Checkpoints")',
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (success) {
                            console.log(processSpecifications(success.data));
                            const res = processSpecifications(success.data);
                            const addRows = res.map(data => new DynamicTabs('checkpoint-tab', 'checkpoint-content', 'checkpoint', data));

                        },
                        else: function (err) {
                            console.log(err);
                        }
                    });
                });

                $(document).on('blur', '#lower-spec', function () {
                    var specs = $('#Specification');
                    var val = $(this).val();
                    specs = specs.val().match(/\d+/)[0];
                    var lowerLimit = specs - val;
                    $('#LimitLower').val(lowerLimit);

                });

                $(document).on('blur', '#upper-spec', function () {
                    var specs = $('#Specification').val();
                    var val = $(this).val();

                    // Extract the numeric part from specs and convert to a number
                    var numericSpecs = parseFloat(specs.match(/\d+(\.\d+)?/)[0]);

                    // Convert val to a number
                    var numericVal = parseFloat(val);


                    // Add the numeric values
                    var upperLimit = numericSpecs + numericVal;

                    console.log(`${numericSpecs}, ${numericVal} ${upperLimit}`);
                    $('#LimitUpper').val(upperLimit);
                });

            });
    </script>

}
