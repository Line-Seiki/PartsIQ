@model PartsIq.Models.EvaluationData

@{
    ViewBag.Title = $"Evaluation - {Model.LotNumber}";
}

@section styles{
    <style>
        .divider {
            background-color: #EEEEEE;
            width: 100%;
            height: 2px;
            margin: 0.5rem 0;
        }

        .flex-sm-column {
            flex-direction: column;
        }
    </style>
}

<div class="page-content">
    <div class="row" id="mainContent">
        <div class="page-content">
            <!-- Title -->
            <div class="page-title-box">
                <div class="container-fluid">
                    <div class="page-title dflex-between-center">
                        <h3 class="mb-1 fw-bold">Evaluation</h3>
                        <ol class="breadcrumb mb-0 mt-1">
                            <li class="breadcrumb-item">
                                <a href="~/">
                                    <i class="bx bx-home fs-xs"></i>
                                </a>
                            </li>
                            <li class="breadcrumb-item">
                                <a href="~/Evaluation">
                                    Evaluation
                                </a>
                            </li>
                            <li class="breadcrumb-item active">@Model.LotNumber</li>
                        </ol>
                    </div>
                </div>
            </div>
            <div class="page-content-wrapper mt--45">
                <div class="container-fluid">
                    <div class="row">
                        <div class="card" id="general-info-container">
                            <div class="card-header d-flex justify-content-between">
                                <h4>General Information</h4>
                                <button id="hide-info" class="btn btn-secondary"><i class="mdi mdi-minus-circle-outline"></i> Hide Info</button>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-lg-6 col-md-12">
                                        <div class="d-flex gap-3">
                                            <p><b>Lot Number</b>:</p>
                                            <p>@Model.LotNumber</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Date Delivered</b>:</p>
                                            <p>@Model.DateDelivered.ToString("MMM dd, yyyy")</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Part Code</b>:</p>
                                            <p>@Model.PartCode</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Sample Size</b>:</p>
                                            <p>@Model.SampleSize</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Time</b>:</p>
                                            <p>@Model.TimeString</p>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-12">
                                        <div class="d-flex gap-3">
                                            <p><b>Lot Quantity</b>:</p>
                                            <p>@Model.LotQuantity</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Supplier</b>:</p>
                                            <p>@Model.Supplier</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Part Name</b>:</p>
                                            <p>@Model.PartName</p>
                                        </div>
                                        <div class="d-flex gap-3">
                                            <p><b>Number of Cavities</b>:</p>
                                            <p>@Model.CavityNum</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header">
                                <!-- Left section for Checkpoints -->
                                <div class="d-flex flex-column gap-3">
                                    <div class="d-flex justify-content-between">
                                        <h5 class="me-3">Checkpoints</h5>
                                        <button class="btn btn-secondary d-none" id="show-info"><i class="mdi mdi-plus-circle-outline"></i> Show Info</button>
                                    </div>

                                    <div class="d-flex flex-lg-row flex-md-column flex-sm-column justify-content-between gap-3">
                                        <div class="d-flex gap-3">
                                            <p class="mb-0"><b>Checkpoint Number:</b></p>
                                            <select id="CheckpointInfo" class="form-control ms-2">
                                                @foreach (var checkpoint in ViewBag.Checkpoints)
                                                {
                                                    <option value="@checkpoint.CheckpointId"
                                                            data-measurement="@checkpoint.IsMeasurement"
                                                            data-upperlimit="@checkpoint.LimitUpper"
                                                            data-lowerlimit="@checkpoint.LimitLower">
                                                        @checkpoint.Code
                                                    </option>
                                                }
                                            </select>
                                        </div>
                                        <!-- Right section for Upper and Lower Limits -->
                                        <div class="d-flex">
                                            <div class="d-flex gap-3 me-4">
                                                <p class="mb-0"><b>Upper Limit:</b></p>
                                                <input id="UpperLimit" type="text" class="form-control"
                                                       value="@ViewBag.Checkpoints[0].LimitUpper" readonly />
                                            </div>
                                            <div class="d-flex gap-3">
                                                <p class="mb-0"><b>Lower Limit:</b></p>
                                                <input id="LowerLimit" type="text" class="form-control"
                                                       value="@ViewBag.Checkpoints[0].LimitLower" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table id="evaluation-table" class="table mb-0 fs-13 nowrap table-striped w-100 text-center">
                                        <thead>
                                            <tr>
                                                <th>Sample Number</th>
                                                <th>Cavity Number</th>
                                                <th>Measurement/Attribute</th>
                                                <th>Original Measurement</th>
                                                <th>Judgement</th>
                                            </tr>
                                        </thead>
                                    </table>
                                    <button id="edit-items-btn" class="btn btn-secondary mt-2"><i class="mdi mdi-pencil"></i> Edit Items</button>
                                    <div class="d-flex flex-lg-row flex-md-column flex-sm-column gap-4 mt-4">
                                        <div><span class="badge badge-soft-secondary badge-pill" id="maxValue"><b>Max Value: </b> #</span> <span id="minValue"></span></div>
                                        <div><span class="badge badge-soft-secondary badge-pill"><b>Min Value: </b> #</span> <span id="maxvalue"></span></div>
                                        <div><span class="badge badge-soft-primary badge-pill"><b>Standard Deviation: </b> #</span> <span id="standardDev"></span></div>
                                    </div>
                                </div>
                                <div class="my-3">
                                    <div class="divider"></div>
                                </div>
                                <div class="d-flex flex-column">
                                    <h5>Evaluation Decision</h5>
                                    <div class="mt-4">
                                        @Html.AntiForgeryToken()
                                        <form id="save-evaluation">
                                            <div class="d-flex gap-3 mb-3">
                                                <label for="Evaluator" class="form-label">Evaluator:</label>
                                                <input type="hidden" class="form-control" id="Evaluator" name="Evaluator" value="@Model.EvaluatorID">
                                                <p><b>@Model.EvaluatorName</b></p>
                                            </div>

                                            <div class="d-flex justify-content-start gap-3 mb-3">
                                                <label for="Comments" class="form-label">Comments:</label>
                                                <input type="text" class="form-control" id="Comments" name="Comments" value="">
                                            </div>

                                            <div class="d-flex justify-content-start gap-3 mb-3">
                                                <label for="Decision" class="form-label">Decision:</label>
                                                <select type="text" class="form-control w-50" id="Decision" placeholder="Select decision" required></select>
                                            </div>
                                            <button type="submit" id="save-evaluation-btn" data-id="@Model.DeliveryDetailID" class="btn btn-primary">Save Evaluation</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        const infoContainer = document.getElementById('general-info-container');
        const showInfo = document.getElementById('show-info');
        const hideInfo = document.getElementById('hide-info');

        $(document).ready(function () {

            //GENERAL INFORMATION CARD FUNCTIONALITY
            hideInfo.addEventListener('click', hideGeneralInfo);
            showInfo.addEventListener('click', showGeneralInfo);


            // Fn for General Information
            function hideGeneralInfo() {
                infoContainer.classList.add('d-none');
                showInfo.classList.remove('d-none');
            }

            function showGeneralInfo() {
                showInfo.classList.add('d-none');
                infoContainer.classList.remove('d-none');
            }


            function toggleEditItems(status) {
                let btn = $('#edit-items-btn');

                if (status) {
                    btn.text("Save Items");
                    btn.removeClass().addClass("btn btn-primary");
                } else {
                    btn.text("Edit Items");
                    btn.removeClass().addClass("btn btn-secondary");
                }
            }

            function withNg(withNg) {
                let $selectedOption = $('#CheckpointInfo').find('option:selected');
                let currentText = $selectedOption.text();

                if (withNg == true) {
                    // Check if "w/NG" is not already present to avoid duplication
                    if (!currentText.includes("w/NG")) {
                        $selectedOption.text(currentText + " w/NG");
                    }
                } else {
                    // Remove "w/NG" if it exists
                    if (currentText.includes("w/NG")) {
                        let updatedText = currentText.replace(" w/NG", "");
                        $selectedOption.text(updatedText);
                    }
                }
            }




            $(document).on('change', '#CheckpointInfo', function () {
                toggleEditItems(false);
                inspectionTable.ajax.reload();
                // Corrected syntax for accessing selected option's data
                let upperlimit = $(this).find('option:selected').data("upperlimit");
                let lowerlimit = $(this).find('option:selected').data("lowerlimit");
                console.log(`${upperlimit} ${lowerlimit}`)
                // Update the Upper and Lower Limit inputs
                $('#UpperLimit').val(upperlimit).text(upperlimit);
                $('#LowerLimit').val(lowerlimit).text(lowerlimit);
            });


            function calculate(obj) {
                // If there is NG., the overall judgement is No Good
                let minMeasurement = obj.length > 0 ? obj[0].Measurement : 0;
                let maxMeasurement = obj.length > 0 ? obj[0].Measurement : 0;

                obj.forEach((checkpoint, index) => {
                    var textColor = checkpoint.Judgement == 1 ? "" : "text-danger";
                    if (checkpoint.Measurement < minMeasurement) {
                        minMeasurement = checkpoint.Measurement;
                    }
                    if (checkpoint.Measurement > maxMeasurement) {
                        maxMeasurement = checkpoint.Measurement;
                    }
                });

                const annotation = {};
                const data = obj.map(ob => ob.Measurement);
                const mean = data.reduce((acc, val) => acc + val, 0) / data.length;


                // Calculate standard deviation
                const squaredDifferences = data.map(val => Math.pow(val - mean, 2));
                const variance = squaredDifferences.reduce((acc, val) => acc + val, 0) / (data.length - 1);
                const standardDeviation = Math.sqrt(variance);

                let withNG = obj.some(s => s.Judgement == "0");
                withNg(withNG);

                // Assign calculated values to annotation object
                annotation["stdv"] = standardDeviation;
                annotation["avg"] = mean;
                annotation["min"] = minMeasurement;
                annotation["max"] = maxMeasurement;
                return annotation;
            }

            //Initialization of DataTable
            var inspectionTable = $('#evaluation-table').DataTable({
                ajax: {
                    url: '@Url.Action("GetInspectionItems", "InspectionItems")',
                    data: function (d) {
                        d.CheckpointID = $('#CheckpointInfo').val();
                        d.InspectionID = @Html.Raw(Model.InspectionID);
                    },
                    dataSrc: 'data'
                },
                responsive: false,
                searching: false,
                scrollX: true,
                paging: false,
                columns: [
                    { data: "SampleNumber" },
                    { data: "CavityName" },
                    {
                        data: "Measurement",
                        render: function (data, type, row) {
                            if (data != null) {
                                return data;
                            } else {
                                return row.Attribute;
                            }
                        }
                    },
                    { data: "OrigMeasurement" },
                    {
                        data: "Judgement",
                        sortable: false,
                        render: function (data, type, row) {
                            let decision = data == "1" ? "GOOD" : "NOT GOOD";
                            return `<span data-judgement="${data}"> ${decision} </span> `;
                        }
                    },
                ],
                rowId: "InspectionItemID",
                order: [[0, 'asc']],
                rowCallback: function (row, data, index) {
                    // Check the judgment value and apply the class to the entire row
                    if (data.Judgement == "0") {
                        $('td', row).addClass('text-danger'); // Apply class to all <td> in the row
                    } else if (data.Judgement == "1") {
                        $('td', row).addClass(''); // Apply class to all <td> in the row
                    }
                },
                drawCallback: function (settings) {
                    var api = this.api();

                    // Get the SampleItems from the current page rows
                    var data = api.rows({ page: 'current' }).data().toArray();

                    if (data.length > 0 && data) {
                        let flags = calculate(data);
                        $("#maxvalue").text(flags.max);
                        $("#minValue").text(flags.min);
                        $("#standardDev").text(flags.stdv);
                        var sampleItemsArray = data.map(function (item) {
                            return item.SampleNumber;
                        });

                        // Find the maximum value in the SampleItems array
                        var maxSampleItem = Math.max(...sampleItemsArray);

                        if ($('#SampleSize').val() > maxSampleItem) {
                            $('#SampleNumber').val(maxSampleItem + 1);
                        } else {
                            $('#SampleNumber').val(maxSampleItem);
                        }
                    } else {
                        $("#maxvalue").text("");
                        $("#minValue").text("");
                        $("#standardDev").text("");
                    }
                }
            });


        // Initialize the selectize dropdown with options
        function initializeDynamicSelectize() {
            return $('#Decision').selectize({
                valueField: 'Value',
                labelField: 'Text',
                searchField: 'Text',
                options: decisionList,
                create: false,
            })[0].selectize;  // This ensures you get the selectize API object
        }

        // Get the decision list from the ViewBag
        let decisionList = @Html.Raw(Json.Encode(ViewBag.DecisionList));

        // Initialize the selectize plugin and save the instance for later use
        const decisionSelectize = initializeDynamicSelectize();

        // Form submission handler
        $(document).on("submit", '#save-evaluation', function (e) {
                e.preventDefault();  // Prevent the form's default submission

                let token = $('input[name="__RequestVerificationToken"]').val();
                let detailID = $('#save-evaluation-btn').data("id");

                // Use the decisionSelectize instance to get the selected value
                const decisionSelected = decisionSelectize.getValue();

                // Collect form data
                const formData = new FormData(this);  // 'this' refers to the form element
                formData.append("Decision", decisionSelected);
                formData.append("DeliveryDetailID", detailID);
                formData.append("__RequestVerificationToken", token);

                // Disable the submit button to prevent multiple submissions
                $('#save-evaluation-btn').prop('disabled', true);

                // SweetAlert confirmation before submitting
                Swal.fire({
                    title: "Save evaluation?",
                    text: "You won't be able to revert this!",
                    icon: "warning",  // Use 'icon' instead of 'type'
                    showCancelButton: true,
                    confirmButtonText: "Yes!",
                    cancelButtonText: "No, cancel!",
                    confirmButtonClass: "btn btn-success mt-2",
                    cancelButtonClass: "btn btn-danger ms-2 mt-2",
                    buttonsStyling: false
                }).then(function (result) {
                    if (result.value) {  // If the user confirms the action
                        $.ajax({
                            url: '@Url.Action("CreateEvaluation", "Evaluation")',
                            type: "POST",
                            data: formData,
                            contentType: false,  // Necessary for FormData handling
                            processData: false,  // Prevent jQuery from processing the data
                            success: function (response) {
                                if (response.success) {
                                    // Handle success, e.g., display a success message or redirect
                                    Swal.fire({
                                        title: "Success!",
                                        text: "Evaluation saved successfully.",
                                        icon: "success"
                                    }).then(() => {
                                        window.location.href = "@Url.Action("Index", "Evaluation")";
                                    });
                                } else {
                                    Swal.fire({
                                        title: "Error!",
                                        text: response.message || "An error occurred during saving.",
                                        icon: "error"
                                    });
                                }
                            },
                            error: function (err) {
                                Swal.fire({
                                    title: "Error!",
                                    text: "An error occurred while processing the request.",
                                    icon: "error"
                                });
                                console.error("Error:", err);
                            },
                            complete: function () {
                                // Re-enable the submit button once the request completes
                                $('#save-evaluation-btn').prop('disabled', false);
                            }
                        });
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        Swal.fire({
                            title: "Cancelled",
                            text: "Your evaluation was not submitted.",
                            icon: "error"
                        });
                        $('#save-evaluation-btn').prop('disabled', false); // Re-enable if cancelled
                    }
                });
            });


             $(document).on('click', '#edit-items-btn', function () {
                 let isMeasurement = $('#CheckpointInfo option:selected').data('measurement') === "True"; // Simplify isMeasurement check

                 if ($(this).hasClass("btn-secondary")) {

                     if (!inspectionTable.rows().count()) {
                         alertify.error("No editable inspection items.");
                     } else {
                         // Switch to edit mode
                         inspectionTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                             var $row = $(this.node());
                             var $measurementCell = $row.find('td').eq(2);
                             var $judgementCell = $row.find('td').eq(4);
                             var isGood = $judgementCell.find('span').data('judgement');

                             // Allow judgment change manually if it's not a measurement
                             if (!isMeasurement) {
                                 var selectedValue = isGood == 1 ? 'Good' : 'Not Good';
                                    $judgementCell.html(`
                                        <select class="form-control judgement-select">
                                        <option value="1" ${isGood == 1 ? 'selected' : ''}>Good</option>
                                        <option value="0" ${isGood == 0 ? 'selected' : ''}>Not Good</option>
                                        </select>
                                    `);
                             }
                             // Add input for Measurement cell if not present
                             if ($measurementCell.find('input').length === 0) {
                                 var currentValue = $measurementCell.text().trim();
                                 $measurementCell.attr('data-originalValue', currentValue);
                                 $measurementCell.html(`<input type="text" class="form-control measurement-input" value="${currentValue}" />`);
                             }
                         });

                         toggleEditItems(true);
                     }


        } else {
            let ajaxReload = false;
            // Switch to save mode
            // Switch to save mode
            inspectionTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                var $row = $(this.node());
                var rowData = inspectionTable.row($row).data();
                var $measurementCell = $row.find('td').eq(2);
                var $judgementCell = $row.find('td').eq(4);

                // Ensure rowData exists
                if (!rowData) {
                    console.error('Row data is undefined.');
                    return;
                }

                // Get new measurement value
                var newValue = $measurementCell.find('input').val().trim();
                var originalValue = $measurementCell.attr('data-originalValue');

                // Get new judgment value for non-measurements
                var selectedJudgment = isMeasurement ? rowData.Judgement : $judgementCell.find('select').val();

                // Check if the value has changed
                if (newValue !== originalValue || selectedJudgment != rowData.Judgement) {
                    // Update the cell display without input
                    $measurementCell.html(newValue);

                    // Determine judgement value
                    let upperLimit = $('#UpperLimit').val();
                    let lowerLimit = $('#LowerLimit').val();
                    let judgement = isMeasurement ? (parseFloat(newValue) <= upperLimit && parseFloat(newValue) >= lowerLimit ? 1 : 0) : selectedJudgment;

                    // Prepare form data
                    var formData = new FormData();
                    formData.append("isMeasurement", isMeasurement ? 1 : 0);
                    formData.append("measurementString", newValue);
                    formData.append("attribute", newValue);
                    formData.append("inspectionItemID", rowData.InspectionItemID);
                    formData.append("judgement", judgement);

                    // Send an AJAX request to update the server
                    $.ajax({
                        url: '@Url.Action("UpdateInspectionItem", "InspectionItems")',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            if (response.success) {
                                alertify.success('Measurement and judgment updated successfully.');
                                inspectionTable.ajax.reload(null, false);
                            } else {
                                alertify.error('Error updating item.');
                            }
                        },
                        error: function () {
                            alertify.error('Error connecting to the server.');
                        }
                    });
                }
            });

                    toggleEditItems(false);  // Switch back to view mode
                    inspectionTable.ajax.reload(null, true);
                }
        });



});




    </script>
}